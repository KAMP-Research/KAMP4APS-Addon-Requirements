/**
 */
package apssoftwareoptions.provider;

import apssoftwareoptions.ApssoftwareoptionsFactory;

import apssoftwareoptions.util.ApssoftwareoptionsAdapterFactory;

import de.uka.ipd.sdq.dsexplore.qml.dimensiontypes.DimensionTypeScale;
import de.uka.ipd.sdq.dsexplore.qml.dimensiontypes.DimensiontypesPackage;

import de.uka.ipd.sdq.dsexplore.qml.dimensiontypes.util.DimensiontypesSwitch;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import options.OptionRepository;
import options.OptionsPackage;

import options.util.OptionsSwitch;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ApssoftwareoptionsItemProviderAdapterFactory extends ApssoftwareoptionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ApssoftwareoptionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqProgramOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqProgramOptionItemProvider apsReqProgramOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqProgramOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqProgramOptionAdapter() {
		if (apsReqProgramOptionItemProvider == null) {
			apsReqProgramOptionItemProvider = new APSReqProgramOptionItemProvider(this);
		}

		return apsReqProgramOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqFunctionOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqFunctionOptionItemProvider apsReqFunctionOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqFunctionOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqFunctionOptionAdapter() {
		if (apsReqFunctionOptionItemProvider == null) {
			apsReqFunctionOptionItemProvider = new APSReqFunctionOptionItemProvider(this);
		}

		return apsReqFunctionOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqFunctionBlockOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqFunctionBlockOptionItemProvider apsReqFunctionBlockOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqFunctionBlockOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqFunctionBlockOptionAdapter() {
		if (apsReqFunctionBlockOptionItemProvider == null) {
			apsReqFunctionBlockOptionItemProvider = new APSReqFunctionBlockOptionItemProvider(this);
		}

		return apsReqFunctionBlockOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqConfigurationOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqConfigurationOptionItemProvider apsReqConfigurationOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqConfigurationOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqConfigurationOptionAdapter() {
		if (apsReqConfigurationOptionItemProvider == null) {
			apsReqConfigurationOptionItemProvider = new APSReqConfigurationOptionItemProvider(this);
		}

		return apsReqConfigurationOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqIECMethodOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqIECMethodOptionItemProvider apsReqIECMethodOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqIECMethodOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqIECMethodOptionAdapter() {
		if (apsReqIECMethodOptionItemProvider == null) {
			apsReqIECMethodOptionItemProvider = new APSReqIECMethodOptionItemProvider(this);
		}

		return apsReqIECMethodOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqGlobalVariableOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqGlobalVariableOptionItemProvider apsReqGlobalVariableOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqGlobalVariableOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqGlobalVariableOptionAdapter() {
		if (apsReqGlobalVariableOptionItemProvider == null) {
			apsReqGlobalVariableOptionItemProvider = new APSReqGlobalVariableOptionItemProvider(this);
		}

		return apsReqGlobalVariableOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqIECPropertyOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqIECPropertyOptionItemProvider apsReqIECPropertyOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqIECPropertyOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqIECPropertyOptionAdapter() {
		if (apsReqIECPropertyOptionItemProvider == null) {
			apsReqIECPropertyOptionItemProvider = new APSReqIECPropertyOptionItemProvider(this);
		}

		return apsReqIECPropertyOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apssoftwareoptions.APSReqIECInterfaceOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APSReqIECInterfaceOptionItemProvider apsReqIECInterfaceOptionItemProvider;

	/**
	 * This creates an adapter for a {@link apssoftwareoptions.APSReqIECInterfaceOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPSReqIECInterfaceOptionAdapter() {
		if (apsReqIECInterfaceOptionItemProvider == null) {
			apsReqIECInterfaceOptionItemProvider = new APSReqIECInterfaceOptionItemProvider(this);
		}

		return apsReqIECInterfaceOptionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (apsReqProgramOptionItemProvider != null) apsReqProgramOptionItemProvider.dispose();
		if (apsReqFunctionOptionItemProvider != null) apsReqFunctionOptionItemProvider.dispose();
		if (apsReqFunctionBlockOptionItemProvider != null) apsReqFunctionBlockOptionItemProvider.dispose();
		if (apsReqConfigurationOptionItemProvider != null) apsReqConfigurationOptionItemProvider.dispose();
		if (apsReqIECMethodOptionItemProvider != null) apsReqIECMethodOptionItemProvider.dispose();
		if (apsReqGlobalVariableOptionItemProvider != null) apsReqGlobalVariableOptionItemProvider.dispose();
		if (apsReqIECPropertyOptionItemProvider != null) apsReqIECPropertyOptionItemProvider.dispose();
		if (apsReqIECInterfaceOptionItemProvider != null) apsReqIECInterfaceOptionItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link DimensiontypesPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class DimensiontypesChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends DimensiontypesSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <T extends Number> Object caseDimensionTypeScale(DimensionTypeScale<T> object) {
				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqProgramOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqFunctionOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqFunctionBlockOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqConfigurationOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqIECMethodOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqGlobalVariableOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqIECPropertyOption()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqIECInterfaceOption()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ApssoftwareoptionsEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link OptionsPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class OptionsChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends OptionsSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseOptionRepository(OptionRepository object) {
				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqProgramOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqFunctionOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqFunctionBlockOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqConfigurationOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqIECMethodOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqGlobalVariableOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqIECPropertyOption()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApssoftwareoptionsFactory.eINSTANCE.createAPSReqIECInterfaceOption()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ApssoftwareoptionsEditPlugin.INSTANCE;
		}
	}

}
