/**
 */
package apsoptions.provider;

import apsoptions.ApsoptionsFactory;
import apsoptions.ApsoptionsPackage;
import apsoptions.util.ApsoptionsAdapterFactory;

import de.uka.ipd.sdq.dsexplore.qml.dimensiontypes.DimensionTypeScale;
import de.uka.ipd.sdq.dsexplore.qml.dimensiontypes.DimensiontypesPackage;
import de.uka.ipd.sdq.dsexplore.qml.dimensiontypes.util.DimensiontypesSwitch;
import java.util.ArrayList;
import java.util.Collection;

import java.util.List;
import options.OptionRepository;
import options.OptionsPackage;
import options.util.OptionsSwitch;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ApsoptionsItemProviderAdapterFactory extends ApsoptionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(ApsoptionsEditPlugin.INSTANCE, ApsoptionsPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ApsoptionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_IntroduceNewComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_IntroduceNewComponentItemProvider xPPU_IntroduceNewComponentItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_IntroduceNewComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_IntroduceNewComponentAdapter() {
		if (xPPU_IntroduceNewComponentItemProvider == null) {
			xPPU_IntroduceNewComponentItemProvider = new xPPU_IntroduceNewComponentItemProvider(this);
		}

		return xPPU_IntroduceNewComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_ChangeComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_ChangeComponentItemProvider xPPU_ChangeComponentItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_ChangeComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_ChangeComponentAdapter() {
		if (xPPU_ChangeComponentItemProvider == null) {
			xPPU_ChangeComponentItemProvider = new xPPU_ChangeComponentItemProvider(this);
		}

		return xPPU_ChangeComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_RemoveComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_RemoveComponentItemProvider xPPU_RemoveComponentItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_RemoveComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_RemoveComponentAdapter() {
		if (xPPU_RemoveComponentItemProvider == null) {
			xPPU_RemoveComponentItemProvider = new xPPU_RemoveComponentItemProvider(this);
		}

		return xPPU_RemoveComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_IntroduceNewModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_IntroduceNewModuleItemProvider xPPU_IntroduceNewModuleItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_IntroduceNewModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_IntroduceNewModuleAdapter() {
		if (xPPU_IntroduceNewModuleItemProvider == null) {
			xPPU_IntroduceNewModuleItemProvider = new xPPU_IntroduceNewModuleItemProvider(this);
		}

		return xPPU_IntroduceNewModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_ChangeModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_ChangeModuleItemProvider xPPU_ChangeModuleItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_ChangeModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_ChangeModuleAdapter() {
		if (xPPU_ChangeModuleItemProvider == null) {
			xPPU_ChangeModuleItemProvider = new xPPU_ChangeModuleItemProvider(this);
		}

		return xPPU_ChangeModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_RemoveModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_RemoveModuleItemProvider xPPU_RemoveModuleItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_RemoveModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_RemoveModuleAdapter() {
		if (xPPU_RemoveModuleItemProvider == null) {
			xPPU_RemoveModuleItemProvider = new xPPU_RemoveModuleItemProvider(this);
		}

		return xPPU_RemoveModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_IntroduceNewStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_IntroduceNewStructureItemProvider xPPU_IntroduceNewStructureItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_IntroduceNewStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_IntroduceNewStructureAdapter() {
		if (xPPU_IntroduceNewStructureItemProvider == null) {
			xPPU_IntroduceNewStructureItemProvider = new xPPU_IntroduceNewStructureItemProvider(this);
		}

		return xPPU_IntroduceNewStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_ChangeStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_ChangeStructureItemProvider xPPU_ChangeStructureItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_ChangeStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_ChangeStructureAdapter() {
		if (xPPU_ChangeStructureItemProvider == null) {
			xPPU_ChangeStructureItemProvider = new xPPU_ChangeStructureItemProvider(this);
		}

		return xPPU_ChangeStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_RemoveStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_RemoveStructureItemProvider xPPU_RemoveStructureItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_RemoveStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_RemoveStructureAdapter() {
		if (xPPU_RemoveStructureItemProvider == null) {
			xPPU_RemoveStructureItemProvider = new xPPU_RemoveStructureItemProvider(this);
		}

		return xPPU_RemoveStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_IntroduceNewInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_IntroduceNewInterfaceItemProvider xPPU_IntroduceNewInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_IntroduceNewInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_IntroduceNewInterfaceAdapter() {
		if (xPPU_IntroduceNewInterfaceItemProvider == null) {
			xPPU_IntroduceNewInterfaceItemProvider = new xPPU_IntroduceNewInterfaceItemProvider(this);
		}

		return xPPU_IntroduceNewInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_ChangeInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_ChangeInterfaceItemProvider xPPU_ChangeInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_ChangeInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_ChangeInterfaceAdapter() {
		if (xPPU_ChangeInterfaceItemProvider == null) {
			xPPU_ChangeInterfaceItemProvider = new xPPU_ChangeInterfaceItemProvider(this);
		}

		return xPPU_ChangeInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link apsoptions.xPPU_RemoveInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected xPPU_RemoveInterfaceItemProvider xPPU_RemoveInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link apsoptions.xPPU_RemoveInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createxPPU_RemoveInterfaceAdapter() {
		if (xPPU_RemoveInterfaceItemProvider == null) {
			xPPU_RemoveInterfaceItemProvider = new xPPU_RemoveInterfaceItemProvider(this);
		}

		return xPPU_RemoveInterfaceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (xPPU_IntroduceNewComponentItemProvider != null) xPPU_IntroduceNewComponentItemProvider.dispose();
		if (xPPU_ChangeComponentItemProvider != null) xPPU_ChangeComponentItemProvider.dispose();
		if (xPPU_RemoveComponentItemProvider != null) xPPU_RemoveComponentItemProvider.dispose();
		if (xPPU_IntroduceNewModuleItemProvider != null) xPPU_IntroduceNewModuleItemProvider.dispose();
		if (xPPU_ChangeModuleItemProvider != null) xPPU_ChangeModuleItemProvider.dispose();
		if (xPPU_RemoveModuleItemProvider != null) xPPU_RemoveModuleItemProvider.dispose();
		if (xPPU_IntroduceNewStructureItemProvider != null) xPPU_IntroduceNewStructureItemProvider.dispose();
		if (xPPU_ChangeStructureItemProvider != null) xPPU_ChangeStructureItemProvider.dispose();
		if (xPPU_RemoveStructureItemProvider != null) xPPU_RemoveStructureItemProvider.dispose();
		if (xPPU_IntroduceNewInterfaceItemProvider != null) xPPU_IntroduceNewInterfaceItemProvider.dispose();
		if (xPPU_ChangeInterfaceItemProvider != null) xPPU_ChangeInterfaceItemProvider.dispose();
		if (xPPU_RemoveInterfaceItemProvider != null) xPPU_RemoveInterfaceItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link DimensiontypesPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class DimensiontypesChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends DimensiontypesSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <T extends Number> Object caseDimensionTypeScale(DimensionTypeScale<T> object) {
				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewComponent()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeComponent()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveComponent()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewModule()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeModule()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveModule()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewStructure()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeStructure()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveStructure()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewInterface()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeInterface()));

				newChildDescriptors.add
					(createChildParameter
						(DimensiontypesPackage.Literals.DIMENSION_TYPE_SCALE__SCALE_ELEMENTS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveInterface()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ApsoptionsEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link OptionsPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class OptionsChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends OptionsSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseOptionRepository(OptionRepository object) {
				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewComponent()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeComponent()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveComponent()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewModule()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeModule()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveModule()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewStructure()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeStructure()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveStructure()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_IntroduceNewInterface()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_ChangeInterface()));

				newChildDescriptors.add
					(createChildParameter
						(OptionsPackage.Literals.OPTION_REPOSITORY__OPTIONS,
						 ApsoptionsFactory.eINSTANCE.createxPPU_RemoveInterface()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ApsoptionsEditPlugin.INSTANCE;
		}
	}

}
